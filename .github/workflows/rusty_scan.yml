name: Distributed Port Scanning (RustScan)

on:
  workflow_dispatch:
    inputs:
      correlation_id:
        description: 'AUTOMATED: The run_id from the parent enumeration workflow'
        required: false
      results_repo_owner:
        description: 'AUTOMATED: Owner of the repo where results are stored'
        required: false
      results_repo_name:
        description: 'AUTOMATED: Name of the repo where results are stored'
        required: false
      manual_input_file:
        description: 'MANUAL: Path to a massdns.txt formatted file in this repo to scan'
        required: false
        default: ''

permissions:
  contents: write
  actions: write

env:
  STORE_REPO_NAME: ${{ github.event.inputs.results_repo_name || secrets.STORE }}
  ACCOUNT2_REPO_OWNER: ${{ github.event.inputs.results_repo_owner || secrets.ACCOUNT2_REPO_OWNER }}
  DISTRIBUTION_THRESHOLD: 8
  PRIMARY_PERCENTAGE: 40
  SECONDARY_PERCENTAGE: 35
  ACCOUNT2_REPO_NAME: ${{ secrets.ACCOUNT2_REPO_NAME }}
  ACCOUNT3_REPO_OWNER: ${{ secrets.ACCOUNT3_REPO_OWNER }}
  ACCOUNT3_REPO_NAME: ${{ secrets.ACCOUNT3_REPO_NAME }}

jobs:
  prepare_rustscan_chunks:
    name: Prepare Scan Chunks & Package
    runs-on: ubuntu-latest
    outputs:
      all_chunks_matrix_json: ${{ steps.build_matrix.outputs.full_matrix }}
      total_chunks_count: ${{ steps.build_matrix.outputs.total_chunks }}
      chunk_package_artifact_name: "rustscan-package-${{ github.run_id }}"
    steps:
      - uses: actions/checkout@v4
      - name: Gather All MassDNS Records and Unique IPs
        id: gather_data
        env:
          STORE_RECON_PAT: ${{ secrets.PAT_FOR_SECONDARY_ACCOUNT_REPO }}
          MANUAL_FILE: ${{ github.event.inputs.manual_input_file }}
        run: |
          if [[ -n "$MANUAL_FILE" ]]; then
            if [[ ! -f "$MANUAL_FILE" ]]; then echo "::error:: Manual file not found."; exit 1; fi
            cp "$MANUAL_FILE" all_massdns_records.txt
          else
            git clone --depth 1 "https://x-access-token:${STORE_RECON_PAT}@github.com/${{ env.ACCOUNT2_REPO_OWNER }}/${{ env.STORE_REPO_NAME }}.git" store-recon
            find store-recon/results -type f -name "massdns.txt" -exec cat {} + > all_massdns_records.txt
          fi
          if [ -s all_massdns_records.txt ]; then
            awk '{print $3}' all_massdns_records.txt | sort -u > all_unique_ips.txt
          else
            touch all_massdns_records.txt all_unique_ips.txt
          fi
      - name: Build Matrix & Create IP Chunks
        id: build_matrix
        run: |
          JSON_MATRIX='[]'
          if [ -s all_unique_ips.txt ]; then
            mkdir -p chunks/ip-lists
            split -l 200 -a 4 --numeric-suffixes=1 all_unique_ips.txt "chunks/ip-lists/chunk_"
            while IFS= read -r chunk_file_path; do
              JSON_MATRIX=$(printf '%s' "$JSON_MATRIX" | jq -c --arg c "$chunk_file_path" '. + [{chunk:$c}]')
            done < <(find "chunks/ip-lists/" -name 'chunk_*' -type f)
          fi
          TOTAL_CHUNKS=$(echo "$JSON_MATRIX" | jq 'length')
          echo "full_matrix=${JSON_MATRIX}" >> $GITHUB_OUTPUT
          echo "total_chunks=${TOTAL_CHUNKS}" >> $GITHUB_OUTPUT
      - name: Package Chunks and Full Mapping File
        if: steps.build_matrix.outputs.total_chunks > 0
        run: tar -czvf "rustscan-package-${{ github.run_id }}.tar.gz" chunks all_massdns_records.txt
      - name: Upload Scan Package Artifact
        if: steps.build_matrix.outputs.total_chunks > 0
        uses: actions/upload-artifact@v4
        with:
          name: "rustscan-package-${{ github.run_id }}"
          path: "rustscan-package-${{ github.run_id }}.tar.gz"
          retention-days: 1

  distribute_and_trigger_scanners:
    name: Distribute & Trigger Scanners
    needs: prepare_rustscan_chunks
    if: needs.prepare_rustscan_chunks.outputs.total_chunks_count > 0
    runs-on: ubuntu-latest
    outputs:
      primary_matrix_json: ${{ steps.calculate_distribution.outputs.primary_matrix }}
    steps:
      - name: Calculate Chunk Distribution
        id: calculate_distribution
        shell: bash
        run: |
          ALL_CHUNKS_JSON='${{ needs.prepare_rustscan_chunks.outputs.all_chunks_matrix_json }}'
          TOTAL_CHUNKS=${{ needs.prepare_rustscan_chunks.outputs.total_chunks_count }}
          if [ "$TOTAL_CHUNKS" -lt "$DISTRIBUTION_THRESHOLD" ]; then
            PRIMARY_CHUNKS_JSON="$ALL_CHUNKS_JSON"; SECONDARY_CHUNKS_JSON="[]"; TERTIARY_CHUNKS_JSON="[]"
          else
            PRIMARY_CHUNK_COUNT=$(echo "($TOTAL_CHUNKS * $PRIMARY_PERCENTAGE) / 100" | bc); SECONDARY_CHUNK_COUNT=$(echo "($TOTAL_CHUNKS * $SECONDARY_PERCENTAGE) / 100" | bc); OFFSET_FOR_TERTIARY=$((PRIMARY_CHUNK_COUNT + SECONDARY_CHUNK_COUNT))
            PRIMARY_CHUNKS_JSON=$(echo "$ALL_CHUNKS_JSON" | jq -c --argjson limit "$PRIMARY_CHUNK_COUNT" '.[0:$limit]')
            SECONDARY_CHUNKS_JSON=$(echo "$ALL_CHUNKS_JSON" | jq -c --argjson offset "$PRIMARY_CHUNK_COUNT" --argjson limit "$SECONDARY_CHUNK_COUNT" '.[$offset : $offset+$limit]')
            TERTIARY_CHUNKS_JSON=$(echo "$ALL_CHUNKS_JSON" | jq -c --argjson offset "$OFFSET_FOR_TERTIARY" '.[$offset:]')
          fi
          echo "primary_matrix=${PRIMARY_CHUNKS_JSON}" >> $GITHUB_OUTPUT

  run_primary_account_scan:
    name: Run Port Scan (Primary)
    needs: [prepare_rustscan_chunks, distribute_and_trigger_scanners]
    if: needs.prepare_rustscan_chunks.outputs.total_chunks_count > 0
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.distribute_and_trigger_scanners.outputs.primary_matrix_json) }}
    steps:
      - uses: actions/checkout@v4
      - name: Download & Extract Scan Package
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare_rustscan_chunks.outputs.chunk_package_artifact_name }}

      - name: Extract Scan Package Archive
        run: |
          if [ -f *.tar.gz ]; then
            tar -xzvf *.tar.gz
            echo "âœ… Successfully extracted chunks and mapping file."
          else
            echo "::error:: Scan package not found!"; exit 1
          fi

      - name: Map Subdomains to Ports (Naabu + RustScan)
        run: |
          # ... This entire step is unchanged from the previous answer as its logic is now correct ...
          IP_CHUNK_FILE="${{ matrix.pair.chunk }}"; FULL_MASSDNS_FILE="all_massdns_records.txt"; OUTPUT="subdomain_ports.txt"; PORTS="80,443,8080,8443,3000,8000"
          TMP_IP2SUB=$(mktemp); TMP_NONCDN=$(mktemp); TMP_CDN=$(mktemp); TMP_SMAP_NONCDN=$(mktemp); TMP_RUSTSCAN=$(mktemp); SMAP_FILE=$(mktemp)
          awk '{ print $3, $1 }' "$FULL_MASSDNS_FILE" | sort -k1,1 -u > "$TMP_IP2SUB"
          cat "$IP_CHUNK_FILE" | cut-cdn -ua -t 50 -silent -o "$TMP_NONCDN" || true
          if [ -s "$TMP_NONCDN" ]; then
              naabu -l "$TMP_NONCDN" -passive -o "$TMP_SMAP_NONCDN" -no-color -silent || true
              rustscan -a "$TMP_NONCDN" -p "$PORTS" --no-banner -t 4000 --tries 1 -u 5000 -b 600 --greppable --accessible > "$TMP_RUSTSCAN" || true
              cat "$TMP_RUSTSCAN" | awk -F ' -> ' '{ gsub(/[\[\]]/, "", $2); n = split($2, p, ","); for(i=1;i<=n;i++) print $1 ":" p[i] }' | anew -q "$TMP_SMAP_NONCDN" || true
          fi
          cat "$IP_CHUNK_FILE" | anew -d "$TMP_NONCDN" > "$TMP_CDN"
          cat "$TMP_SMAP_NONCDN" "$TMP_CDN" 2>/dev/null | sort -u > "$SMAP_FILE"
          awk -F: 'NF==2 { print $1, $2 } NF==1 { print $1, "" }' "$SMAP_FILE" | sort -k1,1 | join - "$TMP_IP2SUB" | { awk 'NF >= 2 { if (NF == 3 && $2 ~ /^[0-9]+$/) { print $3 ":" $2 } else { print $NF } }' } > "$OUTPUT"
      - name: Sort Port Scan Results
        run: |
          mkdir -p results; if [ ! -s "subdomain_ports.txt" ]; then exit 0; fi
          while read -r line; do subdomain=$(echo "$line" | cut -d: -f1); parent=$(echo "$subdomain" | rev | cut -d. -f1,2 | rev); mkdir -p "results/$parent"; echo "$line" >> "results/$parent/subdomain_ports.txt"; done < subdomain_ports.txt
      
      # FIX: This new step creates the safe artifact name.
      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV
      
      # FIX: This step now uses the safe environment variable.
      - name: Upload Primary Account Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: rustscan-results-primary-${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1

  # REFACTORED JOB: This job now only merges and checks results, passing its finding to the next job.
  merge_scan_results:
    name: Merge All Distributed Scan Results
    needs: run_primary_account_scan
    if: always()
    runs-on: ubuntu-latest
    outputs:
      has_results: ${{ steps.consolidate.outputs.has_results }}
    steps:
      - name: Download all result artifacts from all accounts
        uses: actions/download-artifact@v4
        with:
          pattern: 'rustscan-results-*'
          path: temp-aggregated-results
          merge-multiple: true
      - name: Check if artifacts were downloaded
        id: check_artifacts
        run: |
          if [ -d "temp-aggregated-results" ] && [ -n "$(ls -A temp-aggregated-results)" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: Consolidate all scan results
        id: consolidate
        if: steps.check_artifacts.outputs.found == 'true'
        run: |
          mkdir -p final_results
          find temp-aggregated-results -type f -name "subdomain_ports.txt" | while read -r f; do D=$(basename "$(dirname "$f")"); mkdir -p "final_results/$D"; cat "$f" >> "final_results/$D/subdomain_ports.txt"; done
          find final_results -type f -name "*.txt" -exec sort -u -o {} {} \;
          if [ -z "$(ls -A final_results)" ]; then
            echo "::warning:: Result artifacts were downloaded, but they contained no valid data."
            echo "has_results=false" >> $GITHUB_OUTPUT
          else
            echo "âœ… Successfully consolidated results from all accounts."
            echo "has_results=true" >> $GITHUB_OUTPUT
          fi
      - name: Upload Final Consolidated Artifact
        if: steps.consolidate.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-scan-results
          path: final_results/
          retention-days: 1

  # REFACTORED JOB: This job now runs conditionally based on the merge job's output.
  commit_scan_results:
    name: Commit Scan Results & Notify
    needs: merge_scan_results
    if: needs.merge_scan_results.outputs.has_results == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download the single consolidated results artifact
        uses: actions/download-artifact@v4
        with:
          name: consolidated-scan-results
          path: final_results
      - name: Organize and Push Port Results
        if: github.event.inputs.manual_input_file == ''
        env:
          STORE_RECON_PAT: ${{ secrets.PAT_FOR_SECONDARY_ACCOUNT_REPO }}
          CORRELATION_ID: ${{ github.event.inputs.correlation_id }}
        run: |
          git config --global user.name "Recon Bot" && git config --global user.email "bot@github.com"
          git clone "https://x-access-token:${STORE_RECON_PAT}@github.com/${{ env.ACCOUNT2_REPO_OWNER }}/${{ env.STORE_REPO_NAME }}.git" store-recon
          cd store-recon
          for domain_dir in ../final_results/*; do
            domain_name=$(basename "$domain_dir")
            dest_repo_dir="results/$domain_name" && mkdir -p "$dest_repo_dir"
            if [ -f "$domain_dir/subdomain_ports.txt" ]; then
              cat "$domain_dir/subdomain_ports.txt" "$dest_repo_dir/puredns_result.txt" 2>/dev/null | sort -u > "$dest_repo_dir/puredns_result.txt.tmp" && mv "$dest_repo_dir/puredns_result.txt.tmp" "$dest_repo_dir/puredns_result.txt"
            fi
          done
          if git diff --quiet; then echo "No port scan changes to commit."; exit 0; fi
          git add results/
          git commit -m "feat: Add port scan results from scan ID: ${CORRELATION_ID}"
          git push
      - name: Trigger http multiple three
        if: github.event.inputs.manual_input_file == ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: http_dispatch_three.yml
          repo: Pcoder7/http-multiple-three
          token: ${{ secrets.PAT_TOKEN }}
          ref: main
          inputs: '{ "run_id": "${{ github.event.inputs.correlation_id }}", "results_repo": "${{ env.ACCOUNT2_REPO_OWNER }}/${{ env.STORE_REPO_NAME }}" }'
